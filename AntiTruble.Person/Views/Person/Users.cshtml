
@{
    ViewData["Title"] = "Менеджмент пользователей";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using AntiTruble.Person.JsonModels;
@using AntiTruble.ClassLibrary.Enums;
@model IEnumerable<PersonModel>

<div id="add-user"></div>

<div id="user-list">
    <h2>Пользователи системы:</h2>
    <hr />
    <div style="float: right; margin-bottom:10px;">
        <button style="width: 200px; height: 30px;" class="btn-default" id="addUser" onclick="onClickAddUser()">Добавить пользователя</button>
    </div>
    <table class="table table-bordered table-responsive table-hover">
        <tr>
            <th>ФИО</th>
            <th>Номер телефона</th>
            <th>Адрес</th>
            <th>Баланс</th>
            <th>Роль</th>
            <th>Действия</th>
        </tr>
        @foreach (var user in Model)
        {
            <tr>
                <td>
                    <input class="text" type="text" hidden="hidden" style="width:170px;" id="idTextBox" value="@user.PersonId" />
                    <input class="text" type="text" style="width:170px;" id="fioTextBox" value="@user.Fio" />
                </td>
                <td>
                    <input type="text" id="phoneNumberTextBox" value="@user.PhoneNumber" />
                </td>
                <td>
                    <input type="text" id="addressTextBox" value="@user.Address" />
                </td>
                <td>
                    <input type="text" id="balanceTextBox" min="0" step="1" value="@user.Balance" />
                </td>
                <td>
                    @{
                        var listItems = new List<SelectListItem>();
                        listItems.Add(new SelectListItem
                        {
                            Text = "Администратор",
                            Value = ((int)PersonTypes.Administator).ToString()
                        });
                        listItems.Add(new SelectListItem
                        {
                            Text = "Клиент",
                            Value = ((int)PersonTypes.Client).ToString()
                        });
                        listItems.Add(new SelectListItem
                        {
                            Text = "Мастер",
                            Value = ((int)PersonTypes.Master).ToString()
                        });
                        listItems.First(x => x.Value == user.Role.Value.ToString()).Selected = true;
                    }
                    @Html.DropDownList("DDL", listItems, null, new { @id = "roleDDL", @class = "myclass" })
                </td>
                <td>
                    <button style="width: 75px; height: 25px;" class="btn-success" id="updateUser" onclick="onClickUpdateUser(this.id)">Обновить</button>
                    <button style="width: 75px; height: 25px;" class="btn-danger" id="deleteUser" onclick="onClickDeleteUser(this.id)">Удалить</button>
                </td>
            </tr>
        }
    </table>
</div>
<script type="text/javascript">
    var UIelements = ["idTextBox", "fioTextBox", "phoneNumberTextBox", "addressTextBox", "balanceTextBox", "roleDDL", "updateUser", "deleteUser"];

    function getSecondPart(str) {
        return str.split('_')[1];
    }

    $(document).ready(function () {
        for (i = 0; i < UIelements.length; i++) {
            var elementsById = document.querySelectorAll('[id=' + UIelements[i] + ']');
            for (j = 0; j < elementsById.length; j++) {
                var newID = UIelements[i] + "_" + j;
                $(elementsById[j]).attr('id', newID);
            }
        }
    });

    function getRowData(rowId) {
        return {
            "PersonId": $("#idTextBox_" + rowId).val(),
            "Fio": $("#fioTextBox_" + rowId).val(),
            "PhoneNumber": $("#phoneNumberTextBox_" + rowId).val(),
            "Address": $("#addressTextBox_" + rowId).val(),
            "Balance": $("#balanceTextBox_" + rowId).val(),
            "Role": $("#roleDDL_" + rowId).val(),
            "Password": ""
        }
    }

        function onClickAddUser() {
            debugger;
            $('#user-list').hide();
              var urlPath = '@Url.Action("AddUserView", "Person")';
              $.ajax({
                type: "GET",
                url: urlPath,
                dataType: "html",
                  success: function (data) {
                    $("#add-user").html(data);
                    },
                    error: function () {
                        alert("error");
                    }
                });
        }

    function onClickUpdateUser(longId) {
        var rowId = getSecondPart(longId);
        var rowData = getRowData(rowId);
        var urlPath = '@Url.Action("UpdateUser", "Person")';
          $.ajax({
              type: "POST",
              data: rowData,
              dataType: "json",
              url: urlPath,
              success: function () {
                  location.reload();
                  alert("Пользователь обновлен");
              },
              error: function () {
                  alert("error");
              }
            });
    }

    function onClickDeleteUser(longId) {
        var rowId = getSecondPart(longId);
        var personId = getRowData(rowId).PersonId;
        debugger;
        var urlPath = '@Url.Action("DeleteUser", "Person")';
        $.ajax({
            type: "POST",
            data: {
                "personId": personId
            },
              dataType: "json",
              url: urlPath,
              success: function () {
                  location.reload();
                  alert("Пользователь удален");
              },
              error: function () {
                  alert("error");
              }
            });
    }

</script>